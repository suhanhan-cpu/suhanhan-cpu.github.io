{"meta":{"title":"suhanhan的博客","subtitle":"","description":"目前主要还是记录一些关于CTF密码学的学习历程","author":"suhanhan","url":"http://example.com","root":"/"},"pages":[{"title":"分类","date":"2024-12-08T13:58:44.000Z","updated":"2024-12-08T14:17:43.089Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2024-12-21T13:37:01.535Z","updated":"2024-12-21T13:37:01.514Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"关于所属战队：星盟安全团队（预备队） 热爱密码学的菜鸡一枚，由于平时做题没有上传到博客的习惯，后面发现上传一下还是挺重要的，后面开始不定时更新一些题目的解题思路。(๑ó﹏ò๑) QQ：2539036819 邮箱：&#50;&#x35;&#51;&#57;&#48;&#x33;&#54;&#x38;&#x31;&#57;&#x40;&#113;&#113;&#x2e;&#x63;&#x6f;&#x6d;"},{"title":"","date":"2024-12-21T06:10:45.586Z","updated":"2024-12-08T11:37:28.758Z","comments":true,"path":"friends/index.html","permalink":"http://example.com/friends/index.html","excerpt":"","text":"友情链接 .links-content{ margin-top:1rem; } .link-navigation::after { content: \" \"; display: block; clear: both; } .card { width: 45%; font-size: 1rem; padding: 10px 20px; border-radius: 4px; transition-duration: 0.15s; margin-bottom: 1rem; display:flex; } .card:nth-child(odd) { float: left; } .card:nth-child(even) { float: right; } .card:hover { transform: scale(1.1); box-shadow: 0 2px 6px 0 rgba(0, 0, 0, 0.12), 0 0 6px 0 rgba(0, 0, 0, 0.04); } .card a { border:none; } .card .ava { width: 3rem!important; height: 3rem!important; margin:0!important; margin-right: 1em!important; border-radius:4px; } .card .card-header { font-style: italic; overflow: hidden; width: 100%; } .card .card-header a { font-style: normal; color: #2bbc8a; font-weight: bold; text-decoration: none; } .card .card-header a:hover { color: #d480aa; text-decoration: none; } .card .card-header .info { font-style:normal; color:#a3a3a3; font-size:14px; min-width: 0; overflow: hidden; white-space: nowrap; } adwa 0xFFF密码手，实力确实没话说。 .links-content{ margin-top:1rem; } .link-navigation::after { content: \" \"; display: block; clear: both; } .card { width: 45%; font-size: 1rem; padding: 10px 20px; border-radius: 4px; transition-duration: 0.15s; margin-bottom: 1rem; display:flex; } .card:nth-child(odd) { float: left; } .card:nth-child(even) { float: right; } .card:hover { transform: scale(1.1); box-shadow: 0 2px 6px 0 rgba(0, 0, 0, 0.12), 0 0 6px 0 rgba(0, 0, 0, 0.04); } .card a { border:none; } .card .ava { width: 3rem!important; height: 3rem!important; margin:0!important; margin-right: 1em!important; border-radius:4px; } .card .card-header { font-style: italic; overflow: hidden; width: 100%; } .card .card-header a { font-style: normal; color: #2bbc8a; font-weight: bold; text-decoration: none; } .card .card-header a:hover { color: #d480aa; text-decoration: none; } .card .card-header .info { font-style:normal; color:#a3a3a3; font-size:14px; min-width: 0; overflow: hidden; white-space: nowrap; } DexterJie 星盟密码手，也很强。 .links-content{ margin-top:1rem; } .link-navigation::after { content: \" \"; display: block; clear: both; } .card { width: 45%; font-size: 1rem; padding: 10px 20px; border-radius: 4px; transition-duration: 0.15s; margin-bottom: 1rem; display:flex; } .card:nth-child(odd) { float: left; } .card:nth-child(even) { float: right; } .card:hover { transform: scale(1.1); box-shadow: 0 2px 6px 0 rgba(0, 0, 0, 0.12), 0 0 6px 0 rgba(0, 0, 0, 0.04); } .card a { border:none; } .card .ava { width: 3rem!important; height: 3rem!important; margin:0!important; margin-right: 1em!important; border-radius:4px; } .card .card-header { font-style: italic; overflow: hidden; width: 100%; } .card .card-header a { font-style: normal; color: #2bbc8a; font-weight: bold; text-decoration: none; } .card .card-header a:hover { color: #d480aa; text-decoration: none; } .card .card-header .info { font-style:normal; color:#a3a3a3; font-size:14px; min-width: 0; overflow: visible; /* 确保文字不会被裁剪 */ white-space: normal; /* 允许换行 */ word-wrap: break-word; /* 长单词换行 */ line-height: 1.5; /* 增加行高，让文字更易阅读 */ } 糖醋小鸡块 鸡块师傅，很多东西都是从他那学到的，真的很强。"}],"posts":[{"title":"勒让德和雅可比","slug":"发布第二篇博客","date":"2024-12-21T16:35:00.000Z","updated":"2024-12-21T18:01:34.816Z","comments":true,"path":"2024/12/22/发布第二篇博客/","permalink":"http://example.com/2024/12/22/%E5%8F%91%E5%B8%83%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"分享两题关于勒让德和雅可比的题目，以前都是拿到直接配合Tonelli_Shanks求二次剩余的，确实没太注意这个函数本身的作用 题1：1234567891011121314151617181920212223242526272829from sympy import *from Crypto.Util.number import *a = 288260533169915p = 1007621497415251FLAG = b&#x27;moectf&#123;xxxxxxxxxxxxxxxxxxxxx&#125;&#x27;def encrypt_flag(flag): ciphertext = [] plaintext = &#x27;&#x27;.join([bin(i)[2:].zfill(8) for i in flag]) for b in plaintext: e = randprime(2, p) if b == &#x27;1&#x27;: n = pow(a, -e, p) ciphertext.append(n) else: n = pow(-a, e ,p) ciphertext.append(n) return ciphertextprint(encrypt_flag(FLAG))&#x27;&#x27;&#x27;[869209361008868, 469987155014055, 477607245771711, 956121763882082, 460028889963055, 533967339350806, 476643304115038, 398098864395899, 708866397520182, 894852371427053, 830040978017214, 982890039414452, 407281601145406, 984373673613758, 331248820899125, 413731871413066, 112233590512619, 844508013531773, 660541015358267, 203847276465014, 196764266760616, 724197319842530, 812956074918088, 543222621016303, 696010102017333, 981894930207802, 267226118917619, 790129874087132, 347190586174502, 558560481026105, 950966879997572, 194292449369649, 939650649212499, 849325569453260, 954903252340838, 666432519482028, 633589915590432, 674835636376805, 411981317282694, 255883519424948, 20332021415046, 41211809179475, 615228291023827, 3174369207878, 692370202966600, 171277599642048, 550867407707890, 928211081192953, 619531888759759, 941561507423215, 227188515309784, 44358479590760, 191301655212015, 872434831540071, 139926467694171, 257184569797282, 424025125913335, 604314815606040, 688629170195562, 934061980780966, 117123867152708, 118775453146424, 650238997700650, 464296860203680, 846900558108148, 136810490139411, 734401553273199, 1003815301659353, 177890098513981, 989132152091058, 925193504078956, 16120118469157, 417698353358040, 321572997822303, 490470448511519, 143301632751724, 201665758214964, 55674980300458, 672801140720347, 538389842964759, 688041819793393, 205641306968894, 85514071959036, 765861630472651, 1002881651048918, 468366360167056, 617444592689374, 489960009824958, 277775292746563, 839649570289759, 44545172581275, 688402966446644, 63769456068611, 213999882436593, 216065701874753, 550918086303447, 537406584676363, 360111428305020, 49045746183886, 406387916012829, 616035592607376, 910420067160309, 793994862952614, 559040919034722, 563431245991661, 540696592133, 692916878493026, 196862724250440, 915740996075121, 93262251719033, 138249806426133, 804205456884944, 980827994771964, 610265656156428, 675182808097113, 871977346966751, 432436067933537, 442408025475728, 68859983520112, 981142230621570, 44959838765869, 718285129646124, 479524397547695, 589544640946059, 723473211888089, 45649254718349, 809760578240640, 924079152216550, 819111458104359, 635798987884173, 493145154891103, 930007668559676, 951257062978841, 271213718852471, 322982213108644, 399650597731932, 599981686178645, 679031137073299, 871271038222937, 181211009276874, 492456903306033, 565461124642037, 368127868271848, 818142124952965, 531075679825305, 470971994131221, 266554775796898, 667178714173757, 601760855209461, 973801647168834, 932955611573179, 560279111769633, 517548136647154, 549911181170332, 60313689384526, 949491482563099, 452808097613187, 526891136085621, 274705731912851, 434344133676355, 115452488467955, 777777483737098, 814398658724455, 910884139326892, 721153094839833, 123149817617701, 733044865256370, 453868668750506, 66612079427577, 764872507837542, 782137313744881, 24535133913719, 360725525868320, 843972203447559, 891517126809644, 360885232459056, 368491982324658, 283707800915486, 326364439338006, 577378371719791, 722856146079435, 103533837658784, 254688935670505, 377583660405763, 437013223157800, 104708446011619, 988031331348961, 6886781492092, 31048660015037, 202508578415311, 819068100189702, 945419575503259, 73138283255017, 139586913643073, 579156429956448, 1003950470653630, 43710932909704, 922978652768702, 2942054726977, 343866518172971, 681650663259700, 614368933971283, 778713632307973, 398606253834970, 652338331771108, 641949670227333, 252161824790388, 598999939736302, 316749687994360, 952960614096341, 396671237810412, 805539289473096, 358920713125289, 935634624997029, 663385581032613, 35662861967181, 651607545611746, 758681810095871, 611397958560345, 196198933017746, 886932929348591, 660636395367246, 468455431788915, 924092573734008, 950690129324433, 999587127966195, 888011838963394, 602531651309337, 872691790865711, 968486908482852, 453553188990935, 695483211524155, 202869346556262, 970853032785416, 464221034091328, 500444626777630, 938300733064411, 739460171542679, 106243138680201, 220381406498074, 736061259497615, 287985336691769, 828566732433388, 25653881073282, 621320181554384, 978367718394475, 699801594755984, 69045944311920, 918153290921350, 742496154847514, 363237956586620, 855864928899402, 800408376661392, 591608071268736, 644600617307002, 400767167982482, 909728690834744, 619305066037810, 403154906624258, 61283916530956, 841154857119583, 271928739448620, 943602826453375, 181046110086998, 505489926854412, 265242434598252, 397601251563453, 582010431811786, 867744877195598, 157197910775288, 966686261925769, 18876998620377, 389690805402299, 537227398431908, 347700971404069, 441035382034345, 130724065565645, 436020443846434, 995901787186173, 218421083750934, 171270989504749, 837304614857272, 95058522671678, 684115651758448, 759170700243634, 963623830143399, 134020269447492, 810880730174490, 197514429664776, 933293941632760, 298355176150228, 291165975126682, 652837005225218, 594968433103211, 717988266663274, 681283193706870, 94720698554954, 534912230024800, 57002875791544, 466283757471303, 98170275960806, 39674133238710, 328905545254275, 600446924183400, 170250560797853, 96447538360913, 402756881318255, 653833791145054, 624186905259950, 381562263941849, 65202471674875, 813603811804515, 82412251682881, 430813934901833, 630104191517524, 564446338863457, 521850616317191, 301536973562373, 530267275218593, 998500657074054, 7212267782858, 259640351421902, 387324702112626, 888396292341115, 749024753723971, 85418162375112, 883404575520240, 728635284501806, 407998283472092, 917783827814342, 843382891125076, 933249524460091, 237368870850561, 461947500031560, 606265478139720, 762497205024250, 196108161980785, 464712920731734, 802735147473729, 663472255956649, 80955982171827, 891052715882349, 129688607671519, 903004933201140, 813929727900992, 100503758506631, 602082014286842, 437397404488802, 47519859806478, 395180151536529, 546373743492093, 647339114173723, 411317111927540, 101696276166348, 678151959559988, 51668751683754, 265849155643268, 868421028571661, 787999759724884, 95267994279095, 689256950522950, 550554665183774, 426522315621696, 139457110594782, 807574535966969, 181385017851905, 221826095950324, 222071619532288, 419028990094469, 976525300090124, 328201093236083, 286722736191619, 492796951075221, 651514298199139, 571796506342022, 206711677756906, 47331710606546, 702594972120132, 392046509167760, 478407918714814, 592730815648701, 138641638103370, 174303830676571, 529279947866956, 137415107280702, 216392715868670, 86947465794518, 818726716800394, 340254397869880, 371508780067424, 325307981047717, 567687140806415, 822565446854328, 660813456229288, 19186753583566, 644846006777331, 141327393629965, 235920480869413, 838745724950584, 276825516838237, 662761874040532, 418355702214096, 313711926685110, 88437689500328, 460176433574732, 2450228266396, 882266239157054, 673897905650082, 206208153755434, 548920099001980, 153266184111387, 13255788142270, 922484903048545, 440748803998307, 916906240947778, 400842493149205, 220485381482889, 487235065872011, 956191700672996, 995028709816052, 494918773812268, 786696522967722, 535635917789998, 659174735355314, 463254511578315, 933226451519003, 145072370503877, 625388715158253, 426295995778131, 115935587473835, 600764310873265, 1001986508035110, 209492238677627, 654076248845276, 255757144067046, 688372647240070, 337337203838464, 515859807535188, 875162734787756, 794777961098119, 609676420444937, 212529507506835, 795546633511290, 241207048060749, 776801875116315, 481556344267066, 816808129431759, 493895095538575, 51663065130083, 872561553334056, 142484860361584, 366178848478200, 582100262745320, 442278448664580, 658722265331043, 838584617412841, 618888833439999, 841459921663339, 442091548782434, 871146541604948, 361232391335863, 267110542973009, 98775266993905, 726739643823148, 208174460713647, 436363607002850, 109080678453891, 324963987304404, 747129957189381, 629090382627354, 326901225863526, 501411395019558, 605957277216355, 924462072245263, 681742264224629, 411620165150528, 978576627121525, 942031139574369, 93231172524187, 25708686373165, 706440278468996, 89296822699255, 609549323696105, 348801631103012, 301019857245003, 568429888021619, 696641838804966, 449524020606334, 717635512592258, 621428075417344, 165738165511311, 158410762741058, 161602488447872, 382183389407570, 328907274595208, 766746904253365, 107746916578801, 659628742394117, 39850489385122, 666051397127749, 474312422270748, 261139991035351, 482902564645709, 676254393545935, 110235980231748, 299458232064890, 656749827505033, 963908115927553, 722720798875107, 905063483734809, 990795739600264, 945238054995697, 176905467315680, 259111931319224, 422601938259904, 117159396440728, 409211931685475, 396232968955842, 114107681334804, 654283725172919, 351622702709255, 679987416555993, 641640026840576, 609806003053710, 482822259657548, 356518658585635, 61811805139089, 69776954369190, 207172995482414, 423131926063329, 943649643602454, 293676703457600, 563080562597489, 908147079943053, 310010658630352, 911778151386170, 817768239483378, 693612854841870, 214788531589375, 582512152031643, 757729953753937, 856571657360108, 680607952419663, 916077663157203, 731305462677020, 66803615445082, 419287139690140, 861593185826982, 616548630486552, 565256279891822, 282588409958136, 520541630210605, 767345971760815, 656739637241909, 379580509057753, 932925281918941, 251029261628871, 725236776074076, 670964848242950, 999244627445965, 916872955089430, 213213460785344, 211432261756385, 31972183664064, 951358022841870, 284145155237805, 785243558960859, 106902570235769, 766091290254305, 795338261445944, 309041437408721, 676408097676556, 502688492691042, 305931665252032, 139617780975991, 783387572420705, 318509103806236, 279274843786582, 960812728784, 765420810885287, 675301912122800, 220900827019425, 68258429521733, 500343726947640]&#x27;&#x27;&#x27; 这边每次的e都是素数，然后a本身就是p的二次剩余，所以一直是有$$x^2&#x3D;a (mod\\ p)$$如果两边同时e次方，仍然是有等式成立，可以判断，但是换成-a就不行了，根据这个依据来判断就行了 exp： 12345678910111213141516from Crypto.Util.number import long_to_bytesa = 288260533169915p = 1007621497415251def Legendre(n, p): return pow(n, (p - 1) // 2, p)flag = &#x27;&#x27;cip = [869209361008868, 469987155014055, 477607245771711, 956121763882082, 460028889963055, 533967339350806, 476643304115038, 398098864395899, 708866397520182, 894852371427053, 830040978017214, 982890039414452, 407281601145406, 984373673613758, 331248820899125, 413731871413066, 112233590512619, 844508013531773, 660541015358267, 203847276465014, 196764266760616, 724197319842530, 812956074918088, 543222621016303, 696010102017333, 981894930207802, 267226118917619, 790129874087132, 347190586174502, 558560481026105, 950966879997572, 194292449369649, 939650649212499, 849325569453260, 954903252340838, 666432519482028, 633589915590432, 674835636376805, 411981317282694, 255883519424948, 20332021415046, 41211809179475, 615228291023827, 3174369207878, 692370202966600, 171277599642048, 550867407707890, 928211081192953, 619531888759759, 941561507423215, 227188515309784, 44358479590760, 191301655212015, 872434831540071, 139926467694171, 257184569797282, 424025125913335, 604314815606040, 688629170195562, 934061980780966, 117123867152708, 118775453146424, 650238997700650, 464296860203680, 846900558108148, 136810490139411, 734401553273199, 1003815301659353, 177890098513981, 989132152091058, 925193504078956, 16120118469157, 417698353358040, 321572997822303, 490470448511519, 143301632751724, 201665758214964, 55674980300458, 672801140720347, 538389842964759, 688041819793393, 205641306968894, 85514071959036, 765861630472651, 1002881651048918, 468366360167056, 617444592689374, 489960009824958, 277775292746563, 839649570289759, 44545172581275, 688402966446644, 63769456068611, 213999882436593, 216065701874753, 550918086303447, 537406584676363, 360111428305020, 49045746183886, 406387916012829, 616035592607376, 910420067160309, 793994862952614, 559040919034722, 563431245991661, 540696592133, 692916878493026, 196862724250440, 915740996075121, 93262251719033, 138249806426133, 804205456884944, 980827994771964, 610265656156428, 675182808097113, 871977346966751, 432436067933537, 442408025475728, 68859983520112, 981142230621570, 44959838765869, 718285129646124, 479524397547695, 589544640946059, 723473211888089, 45649254718349, 809760578240640, 924079152216550, 819111458104359, 635798987884173, 493145154891103, 930007668559676, 951257062978841, 271213718852471, 322982213108644, 399650597731932, 599981686178645, 679031137073299, 871271038222937, 181211009276874, 492456903306033, 565461124642037, 368127868271848, 818142124952965, 531075679825305, 470971994131221, 266554775796898, 667178714173757, 601760855209461, 973801647168834, 932955611573179, 560279111769633, 517548136647154, 549911181170332, 60313689384526, 949491482563099, 452808097613187, 526891136085621, 274705731912851, 434344133676355, 115452488467955, 777777483737098, 814398658724455, 910884139326892, 721153094839833, 123149817617701, 733044865256370, 453868668750506, 66612079427577, 764872507837542, 782137313744881, 24535133913719, 360725525868320, 843972203447559, 891517126809644, 360885232459056, 368491982324658, 283707800915486, 326364439338006, 577378371719791, 722856146079435, 103533837658784, 254688935670505, 377583660405763, 437013223157800, 104708446011619, 988031331348961, 6886781492092, 31048660015037, 202508578415311, 819068100189702, 945419575503259, 73138283255017, 139586913643073, 579156429956448, 1003950470653630, 43710932909704, 922978652768702, 2942054726977, 343866518172971, 681650663259700, 614368933971283, 778713632307973, 398606253834970, 652338331771108, 641949670227333, 252161824790388, 598999939736302, 316749687994360, 952960614096341, 396671237810412, 805539289473096, 358920713125289, 935634624997029, 663385581032613, 35662861967181, 651607545611746, 758681810095871, 611397958560345, 196198933017746, 886932929348591, 660636395367246, 468455431788915, 924092573734008, 950690129324433, 999587127966195, 888011838963394, 602531651309337, 872691790865711, 968486908482852, 453553188990935, 695483211524155, 202869346556262, 970853032785416, 464221034091328, 500444626777630, 938300733064411, 739460171542679, 106243138680201, 220381406498074, 736061259497615, 287985336691769, 828566732433388, 25653881073282, 621320181554384, 978367718394475, 699801594755984, 69045944311920, 918153290921350, 742496154847514, 363237956586620, 855864928899402, 800408376661392, 591608071268736, 644600617307002, 400767167982482, 909728690834744, 619305066037810, 403154906624258, 61283916530956, 841154857119583, 271928739448620, 943602826453375, 181046110086998, 505489926854412, 265242434598252, 397601251563453, 582010431811786, 867744877195598, 157197910775288, 966686261925769, 18876998620377, 389690805402299, 537227398431908, 347700971404069, 441035382034345, 130724065565645, 436020443846434, 995901787186173, 218421083750934, 171270989504749, 837304614857272, 95058522671678, 684115651758448, 759170700243634, 963623830143399, 134020269447492, 810880730174490, 197514429664776, 933293941632760, 298355176150228, 291165975126682, 652837005225218, 594968433103211, 717988266663274, 681283193706870, 94720698554954, 534912230024800, 57002875791544, 466283757471303, 98170275960806, 39674133238710, 328905545254275, 600446924183400, 170250560797853, 96447538360913, 402756881318255, 653833791145054, 624186905259950, 381562263941849, 65202471674875, 813603811804515, 82412251682881, 430813934901833, 630104191517524, 564446338863457, 521850616317191, 301536973562373, 530267275218593, 998500657074054, 7212267782858, 259640351421902, 387324702112626, 888396292341115, 749024753723971, 85418162375112, 883404575520240, 728635284501806, 407998283472092, 917783827814342, 843382891125076, 933249524460091, 237368870850561, 461947500031560, 606265478139720, 762497205024250, 196108161980785, 464712920731734, 802735147473729, 663472255956649, 80955982171827, 891052715882349, 129688607671519, 903004933201140, 813929727900992, 100503758506631, 602082014286842, 437397404488802, 47519859806478, 395180151536529, 546373743492093, 647339114173723, 411317111927540, 101696276166348, 678151959559988, 51668751683754, 265849155643268, 868421028571661, 787999759724884, 95267994279095, 689256950522950, 550554665183774, 426522315621696, 139457110594782, 807574535966969, 181385017851905, 221826095950324, 222071619532288, 419028990094469, 976525300090124, 328201093236083, 286722736191619, 492796951075221, 651514298199139, 571796506342022, 206711677756906, 47331710606546, 702594972120132, 392046509167760, 478407918714814, 592730815648701, 138641638103370, 174303830676571, 529279947866956, 137415107280702, 216392715868670, 86947465794518, 818726716800394, 340254397869880, 371508780067424, 325307981047717, 567687140806415, 822565446854328, 660813456229288, 19186753583566, 644846006777331, 141327393629965, 235920480869413, 838745724950584, 276825516838237, 662761874040532, 418355702214096, 313711926685110, 88437689500328, 460176433574732, 2450228266396, 882266239157054, 673897905650082, 206208153755434, 548920099001980, 153266184111387, 13255788142270, 922484903048545, 440748803998307, 916906240947778, 400842493149205, 220485381482889, 487235065872011, 956191700672996, 995028709816052, 494918773812268, 786696522967722, 535635917789998, 659174735355314, 463254511578315, 933226451519003, 145072370503877, 625388715158253, 426295995778131, 115935587473835, 600764310873265, 1001986508035110, 209492238677627, 654076248845276, 255757144067046, 688372647240070, 337337203838464, 515859807535188, 875162734787756, 794777961098119, 609676420444937, 212529507506835, 795546633511290, 241207048060749, 776801875116315, 481556344267066, 816808129431759, 493895095538575, 51663065130083, 872561553334056, 142484860361584, 366178848478200, 582100262745320, 442278448664580, 658722265331043, 838584617412841, 618888833439999, 841459921663339, 442091548782434, 871146541604948, 361232391335863, 267110542973009, 98775266993905, 726739643823148, 208174460713647, 436363607002850, 109080678453891, 324963987304404, 747129957189381, 629090382627354, 326901225863526, 501411395019558, 605957277216355, 924462072245263, 681742264224629, 411620165150528, 978576627121525, 942031139574369, 93231172524187, 25708686373165, 706440278468996, 89296822699255, 609549323696105, 348801631103012, 301019857245003, 568429888021619, 696641838804966, 449524020606334, 717635512592258, 621428075417344, 165738165511311, 158410762741058, 161602488447872, 382183389407570, 328907274595208, 766746904253365, 107746916578801, 659628742394117, 39850489385122, 666051397127749, 474312422270748, 261139991035351, 482902564645709, 676254393545935, 110235980231748, 299458232064890, 656749827505033, 963908115927553, 722720798875107, 905063483734809, 990795739600264, 945238054995697, 176905467315680, 259111931319224, 422601938259904, 117159396440728, 409211931685475, 396232968955842, 114107681334804, 654283725172919, 351622702709255, 679987416555993, 641640026840576, 609806003053710, 482822259657548, 356518658585635, 61811805139089, 69776954369190, 207172995482414, 423131926063329, 943649643602454, 293676703457600, 563080562597489, 908147079943053, 310010658630352, 911778151386170, 817768239483378, 693612854841870, 214788531589375, 582512152031643, 757729953753937, 856571657360108, 680607952419663, 916077663157203, 731305462677020, 66803615445082, 419287139690140, 861593185826982, 616548630486552, 565256279891822, 282588409958136, 520541630210605, 767345971760815, 656739637241909, 379580509057753, 932925281918941, 251029261628871, 725236776074076, 670964848242950, 999244627445965, 916872955089430, 213213460785344, 211432261756385, 31972183664064, 951358022841870, 284145155237805, 785243558960859, 106902570235769, 766091290254305, 795338261445944, 309041437408721, 676408097676556, 502688492691042, 305931665252032, 139617780975991, 783387572420705, 318509103806236, 279274843786582, 960812728784, 765420810885287, 675301912122800, 220900827019425, 68258429521733, 500343726947640]for i in cip: if Legendre(i, p) == 1: flag += &#x27;1&#x27; else: flag += &#x27;0&#x27;print(long_to_bytes(int(flag, 2))) 题2加密代码： 1234567891011121314151617181920212223242526272829303132from Crypto.Util.number import *from secret import flagimport gmpy2import randomp = getPrime(512)q = getPrime(512)N = p*qe = 65537# this is your hintf = open(&#x27;enc.txt&#x27;,&#x27;w+&#x27;)n = getPrime(512)*getPrime(512)while gmpy2.jacobi(2,n) == 1: n = getPrime(512)*getPrime(512)while p: pad = random.randint(0, 2**2023)**2 message = pad &lt;&lt; 1 + p % 2 cipher = pow(message, e, n) f.write(str(cipher)+&#x27;n&#x27;) p //= 2print(f&quot;n = &#123;n&#125;&quot;)m = bytes_to_long(flag)c = pow(m,e,N)print(f&quot;c = &#123;c&#125;&quot;)print(f&quot;N = &#123;N&#125;&quot;)&quot;&quot;&quot;n = 82923926622559692797413399236810034376108584757782065159980339372753222716219921590160225492580275427915752568365221414556256818363760115994728221502369868369002752050846974475991745713189008605110299692339240298965171454485097086422483463462325085226035968868532041299192645499454997827014006970410602586899c = 5268098693947601218678318823509471571641279409624943251746647090202567499752709232665697183505417421153691929827349942882009815935669724043141950887766485187370271734400923450597010490530223361843541245067817924748052146859671680883073052134640991595920714483571789648126922566108317490787317661128294600152N = 109628115860704625986265200696596612897391500367605131119456557370327560909624343904428497200076500891833170758691164654954696453518335303906271404285089946230989420194893031114417670761660150790683339988822977604942830134644107915859363425376973310923755737797468892908831973816405901129172182483392347465597&quot;&quot;&quot; 一个要注意的点，+的优先级是比&lt;&lt;高的，所以其实是message &#x3D; pad &lt;&lt; (1 + p % 2) 因为这边n不是奇素数，所以不能用Legendre函数来判断 这题首先要了解一些关于雅可比的性质 这边的a实际上应该是叫被测数，m是叫做模数，他们并不是分子和分母的关系，是一种特殊的数学表示 这边不止模数可以分解变成连乘，被测数如果也可以分解的话，也可以变成连乘 注：雅可比符号是勒让德符号的推广，但是根据雅可比符号的值不能判断同余式是否有解。 也就是 一般有如下的性质 还有一个性质就是$$\\left( \\frac{n^e}{m} \\right) &#x3D; \\left( \\frac{n}{m} \\right)^e$$ 不过主要用到的还是红框的性质，下面我们分情况讨论 当p的低位是1的时候，有 当p的低位是0的时候，有 由此构造exp即可 12345678910111213141516171819202122232425262728from Crypto.Util.number import *import sys from gmpy2 import jacobidef Legendre(n, p): return pow(n, (p - 1) // 2, p)e = 65537n = 82923926622559692797413399236810034376108584757782065159980339372753222716219921590160225492580275427915752568365221414556256818363760115994728221502369868369002752050846974475991745713189008605110299692339240298965171454485097086422483463462325085226035968868532041299192645499454997827014006970410602586899c = 5268098693947601218678318823509471571641279409624943251746647090202567499752709232665697183505417421153691929827349942882009815935669724043141950887766485187370271734400923450597010490530223361843541245067817924748052146859671680883073052134640991595920714483571789648126922566108317490787317661128294600152N = 109628115860704625986265200696596612897391500367605131119456557370327560909624343904428497200076500891833170758691164654954696453518335303906271404285089946230989420194893031114417670761660150790683339988822977604942830134644107915859363425376973310923755737797468892908831973816405901129172182483392347465597with open(&#x27;/Users/chenxiangying/Downloads/task (8)-1/enc.txt&#x27;, &#x27;r&#x27;) as f: res = [i for i in f.read().split(&#x27;n&#x27;)]p = &#x27;&#x27;for i in res[:-1:]: if jacobi(int(i) % n, n) == 1: p = &#x27;1&#x27; + p elif jacobi(int(i) % n, n) == -1: p = &#x27;0&#x27; + pp = int(p, 2)assert N % p == 0q = N // pd = inverse(e, (p - 1) * (q - 1))print(long_to_bytes(pow(c, d, N))) #b&#x27;flag&#123;Welcome_to_XMCVE!#$%$#%%^@%#&amp;!$%#!&#125;&#x27;","categories":[{"name":"crypto","slug":"crypto","permalink":"http://example.com/categories/crypto/"},{"name":"日常学习","slug":"crypto/日常学习","permalink":"http://example.com/categories/crypto/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"}],"tags":[]},{"title":"2024 CISCN x 长城杯铁人三项 初赛 WriteUp","slug":"发布第一篇博客","date":"2024-12-21T08:44:00.000Z","updated":"2024-12-21T11:59:16.930Z","comments":true,"path":"2024/12/21/发布第一篇博客/","permalink":"http://example.com/2024/12/21/%E5%8F%91%E5%B8%83%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"rasnd加密代码： 123456789101112131415161718192021222324252627282930313233343536373839404142from Crypto.Util.number import getPrime, bytes_to_longfrom random import randintimport osFLAG = os.getenv(&quot;FLAG&quot;).encode()flag1 = FLAG[:15]flag2 = FLAG[15:]def crypto1(): p = getPrime(1024) q = getPrime(1024) n = p * q e = 0x10001 x1=randint(0,2**11) y1=randint(0,2**114) x2=randint(0,2**11) y2=randint(0,2**514) hint1=x1*p+y1*q-0x114 hint2=x2*p+y2*q-0x514 c = pow(bytes_to_long(flag1), e, n) print(n) print(c) print(hint1) print(hint2)def crypto2(): p = getPrime(1024) q = getPrime(1024) n = p * q e = 0x10001 hint = pow(514*p - 114*q, n - p - q, n) c = pow(bytes_to_long(flag2),e,n) print(n) print(c) print(hint)print(&quot;==================================================================&quot;)crypto1()print(&quot;==================================================================&quot;)crypto2()print(&quot;==================================================================&quot;) 分为两层加密，第一层的话，根据两个hint的等式，直接消掉一个p或者q就行了，然后我们可以得到如下的等式 能满足$$know * p \\equiv 0\\ (mod\\ n)$$​，显然就是know和q有倍数关系，所以这边我们直接gcd找他们的因子就可以了 其实到这边得到这个等式之后，有挺多种方法可以做的，除了直接gcd，用solve_mod函数来做也是可以，但是因为这个在爆破，用solve_mod函数太慢了，roots应该也是一样的 当然也有使用费马小定理之后，去计算gcd(pow(2, know, n)，n)，但是这样实测也非常慢，应该是涉及了幂运算，导致爆破的速度也不理想 exp1： 123456789101112131415161718192021from Crypto.Util.number import bytes_to_long, long_to_bytes, inverse, isPrimefrom gmpy2 import iroot, gcdfrom tqdm import trangen1 = 17310686908778728745449354559802941946997896756243856912832576760675562312077799396599231948126385952057312169901033809840639023433489015009822009587919976821459705568133889486358608412949817482914129347583368378773163903299203660972995618294109645144315334549701096983597019368003407750914501919000206577708655243967346282848018490107046949100610467865379900940374382317941626281607014987898420673393221076557550350714383448163376148090492425725769527732209270580359317981591251860111578196496836532090641023922542177760203697279375290470122370953265605033699999237696530837166987965402030511008570227499053858415589c1 = 16801136688776848905189583066124184181605235613468826025167164990737203785577153779968144287425030876115693615695973552178669507372756662517872836873532372873104381298512676540506180939064702446251055916192839182254160651955152472382129412375165846355186810314277540458462737775658540820351366159791897062706319738582175663161673641264485895479047085644955134173053399210772453274437437650558491343071054681468917598948947849339755507701652954057387144107636550466906541207089179622538211596281963615007936184150772982401572039877033189118382151964903168743863988864938773395153618109854626801894827551132349825934048hint1 = 2477996433220738043622133780345574935136056477634270387691415040860651816313698350481105379393606643792493933030252187985540480193826844575786917504563212615591947336827131036061865020453648292790252977476741824597421573128221147373241709525069458483831823196234210561124714908044630499381066408414577413328176041616410349558032896455987496268hint2 = 3137475932416527139286634960823544631965548664103993358517488315320409377390611754271852553601794986938848132860809744270918113110601431725955064776295841568126005906161924413611266529442263492723531092767851370933688086426874790580454813935496647372763389302737474208961448740153404073860193314600613913409394507452478113751942840536864875073701069386553808604224372149844554572364248242010448859521005078087076922560295908636574339399105701048880829362161183847for x1 in trange(1, 2 ^ 11): for x2 in range(1, 2 ^ 11): know = (hint1 * x2 - hint2 * x1) + 0x114 * x2 - 0x514 * x1 if gcd(know, n1) != 1: q = int(gcd(know, n1)) % n1 e = 65537 p = n1 // q phi = (p - 1) * (q - 1) d1 = inverse(e, phi) print(long_to_bytes(int(pow(c1, d1, n1)))) #b&#x27;flag&#123;299dc9da-d8a0-&#x27; 对于第二层加密的话，直接解一个二元一次方程就可以了（利用到欧拉定理） exp2： 123456789101112131415from Crypto.Util.number import bytes_to_long, long_to_bytes, inverse, isPrimefrom gmpy2 import iroot, gcdn2 = 17852379230831263077492443645517524782877703753693408080027712402383930619845734003191922568470099156757227518418841934348678705692807610487502903475066212024016026772695709874654434071759886847144987627824309040318953055819128137532342600218127375922396169571417060075251837131440789009020281380594551495034506456568639317302650233612183779579388683143456858997880819263732249622210137939698730563046214821230634103313220529125021058999182014757244533018469768194481448634804668491520969148003100428422906592828506579812678209726723490155171972379460695868749876659068978259534378528342458577249471485939878071066781c2 =6457124454630977279083318517136056048994981657102713798861789132946960924788454240045022016749103040038582397266779376922458258879511238711863439172573992672269944281196228832026042788514833807851569807895848773612307107332200937270911202540034907126676830220795450294815846685344274249632796298518652045091113814607892734554835452797267462127322858988899801977668506314249485852001119727739173290541474856419753187538834950880723377243590331445468284278069552329365325402280743189571012755120987340894641050440177292175527281744110219913880353494263914566043077027966527392323264935214909513300432715625591998932278hint2 = 7022928469215188794896159363114216103264137878166634936619665468565860894410179602925380205654804344175484822946774664548850198574273507877356676945333658983326465614140366844687501782669688509290255495687946212664207595107103278265123751844101029087286192458571447776880684457682304092209759498024170110943489459735345987232782942337036666190988352534111964443352600615267949091000136931756580923914824359453466918676964147705663433852995198096337163404473487073140676231970342261180171821824455950519091774102747410457593553416780633424458115273755507656388667082208435890865202586317510023135252865190973648070447p = (inverse(hint2, n2) + iroot(int(inverse(hint2, n2) ^ 2 + 4 * 514 * 114 * n2), 2)[0]) // (2 * 514)q = n2 // pphi = (p - 1) * (q - 1)e = 0x10001d2 = inverse(e, phi)print(long_to_bytes(int(pow(c2, d2, n2)))) #b&#x27;4250-9e12-63032352c599&#125;&#x27; fffffhash今年的CISCN就有格做法的了 加密代码： 12345678910111213141516171819202122import osfrom Crypto.Util.number import *def giaogiao(hex_string): base_num = 0x6c62272e07bb014262b821756295c58d x = 0x0000000001000000000000000000013b MOD = 2**128 for i in hex_string: base_num = (base_num * x) &amp; (MOD - 1) base_num ^= i return base_numgiao=201431453607244229943761366749810895688print(&quot;1geiwoligiaogiao&quot;)hex_string = int(input(),16)s = long_to_bytes(hex_string)if giaogiao(s) == giao: print(os.getenv(&#x27;FLAG&#x27;))else: print(&quot;error&quot;) 思路很简单，去年是用中间相遇攻击打的，不过那个极限应该在7位左右，这次位数都不知道了，很明显用格打才行，然后爆破一手位数就可以了 以s的长度是4为例（就是把异或看做是加法，用w来代表所对应的误差 造个得先拿等式，本地测试一下，构造出来的等式应该是类似这样的 12345678b0, b1, b2, w0, w1, w2, w3, x = var(&#x27;b0, b1, b2, w0, w1, w2, w3, x&#x27;.replace(&#x27;,&#x27;, &#x27;&#x27;))bb3 = b2 * x + w2bb2 = b1 * x + w1bb1 = b0 * x + w0b4 = b3 * x + w3b4.subs(b3 = bb3).subs(b2 = bb2).subs(b1 = bb1).expand() 1b0*x^4 + w0*x^3 + w1*x^2 + w2*x + w3 根据等式我们很明显可以构造出如下的格 然后规约得到的w0，w1，w2，w3就是误差，满足 由此类推即可得到s3，s2，s1，s0 exp： 123456789101112131415161718192021222324252627282930313233343536373839404142434445from Crypto.Util.number import bytes_to_long, long_to_bytes, inverse, isPrimefrom gmpy2 import iroot, gcdfrom tqdm import trangeimport itertoolsimport sysb0 = 0x6c62272e07bb014262b821756295c58dx = 0x0000000001000000000000000000013bgiao=201431453607244229943761366749810895688MOD = 2**128for num in trange(1, 50): #num为可能的明文长度 B = [giao] tmp, S = [], [] for i in range(num - 1, -1, -1): tmp.append(x ^ i) tmp.append(b0 * x ^ num - giao) L = block_matrix([[identity_matrix(num + 1), Matrix(ZZ, num + 1, 1, tmp)], [Matrix(ZZ, 1, num + 1), MOD]]) Q = diagonal_matrix(ZZ, [1] * num + [128] + [2 ^ 128]) L = L * Q res = L.BKZ() for j in res: if abs(j[-2]) == 128 and j[-1] == 0: if j[-2] == 128: my = j[:-2:] for w in range(len(my) - 1, -1, -1): tmp_b = (B[-1] - my[w]) * inverse(x, MOD) % MOD B.append(tmp_b) S.append(((tmp_b * x) ^^ B[-2]) % MOD) #这个注意还是要限制在模的意义下，比赛那时候就是忘记了导致格一直打不出来 if all(0 &lt;= w &lt;= 256 for w in S): print(bytes(S[::-1]).hex()) # sys.exit() elif j[-2] == -128: my = [-lll for lll in j[:-2:]] for w in range(len(my) - 1, -1, -1): tmp_b = (B[-1] - my[w]) * inverse(x, MOD) % MOD B.append(tmp_b) S.append(((tmp_b * x) ^^ B[-2]) % MOD) #这个注意还是要限制在模的意义下，比赛那时候就是忘记了导致格一直打不出来 if all(0 &lt;= w &lt;= 256 for w in S): print(bytes(S[::-1]).hex()) # sys.exit() 12345678910111213141516171819020101081b04390001051a020a3d0f0f1df2006d2e3362153d001f53102a7c2a0a591516f7d210031a28123358f217313d0f1d070d043a2215df3beb01fd05000d1f09147c051c6f0000090aed273d00070e092f101f387d22071b040308766d3901030d3f091d03fc1d0c00030202030d020b0c06191e3908121a03fb03181c041e090d0d010f0500020704011603017f0c191e02080b0d023c0d3f0a18130b060204f406021c0405040937031f0e7f0d1a0f020e0b0400070104010e05070e020502fffe020f06030a05020f023a010f3c3b010f020a04067d0d0f021f040c020207000201030104001efb070e03050f043e027c0f1c0b3d02011b02017600020400050607040f030406041e043d1d05011b060c07070a1f060d3c070e000f060c0f130e043c0102020d0f01070107000d0201040507040e06010d0b070303001c0200000301010f041c0e0a3f3c02060202030603070004040a003d030203000207011e0704fd00021c0600060005010302060707070101040dfe0703010507021f01020d0401030203001d070e0f060f3d000f0e0103061b031f07010203013d06020e000d0e000e0d0c0e1d01030e013e037d061e02060e02000102020207033c03001d010703050404fc073e000f01001f000d0700003c0000001f0f07011e060101030101000602010106071c0305000e010dfc040d0100060401010d030301030e1c06050b0700001f063f0300021e02000e0f06010100010300020200050f010207040202030f00ff010701020003010302070005010e000102000c0a030500030000020103010007020006050a0005011c0505010c040003 其中070e092f101f387d22071b040308766d3901030d3f091d03为我们所要求的 lwewl这题后面再更，当时比赛差点打出来了（看那个5解，真的很着急），一个lwe和一个rlwe，有段时间没碰密码太生疏了，忘了挺多，思维都迟钝了。","categories":[{"name":"crypto","slug":"crypto","permalink":"http://example.com/categories/crypto/"},{"name":"比赛","slug":"crypto/比赛","permalink":"http://example.com/categories/crypto/%E6%AF%94%E8%B5%9B/"}],"tags":[]}],"categories":[{"name":"crypto","slug":"crypto","permalink":"http://example.com/categories/crypto/"},{"name":"日常学习","slug":"crypto/日常学习","permalink":"http://example.com/categories/crypto/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"},{"name":"比赛","slug":"crypto/比赛","permalink":"http://example.com/categories/crypto/%E6%AF%94%E8%B5%9B/"}],"tags":[]}